<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.2.xsd">
 
 	<context:property-placeholder location="classpath:/jedis.properties" ignore-unresolvable="true"/>
 	<context:property-placeholder location="classpath:/base.properties" ignore-unresolvable="true"/>
 
 	<!-- redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	</bean>
	 
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	    <property name="hostName" value="${redis.sessionIp}" />
	    <property name="port" value="${redis.sessionPort}" />
	    <property name="password" value="${redis.pwd}" />
	    <property name="timeout" value="${redis.pool.maxWait}" />
	    <property name="poolConfig" ref="jedisPoolConfig" />
	    <property name="usePool" value="true" />
	</bean>
	 
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
	    <property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
	<!-- 替换 spring-session 的 CookieSerializer (DefaultCookieSerializer)， 实现 session 共享 -->
	<bean id="cookieSerializer" class="org.springframework.session.web.http.DefaultCookieSerializer">
		<property name="cookiePath" value="/"></property>
		<!-- <property name="domainNamePattern" value="(\\w{2,}\\.\\w{2,3}\\.\\w{2,3}|\\w{2,}\\.\\w{2,3})$"></property> -->
		<property name="domainName" value="${sessionDomain}"></property>
	</bean>
	 
	<!-- RedisHttpSessionConfiguration 将会导出 springSessionRepositoryFilter， 该 filter 用在 web.xml 中. 
		具体可见  RedisHttpSessionConfiguration 的父类，采用了 @Bean 将 SessionRepositoryFilter 导出-->
	<bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<!-- session 超时时间，单位 s，默认值30分钟 -->
	    <property name="maxInactiveIntervalInSeconds" value="1800" />
	</bean>

</beans>